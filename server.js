// server.js

import { ethers } from "ethers";
import pkg from "pg";
import TelegramBot from "node-telegram-bot-api";
import dotenv from "dotenv";
import express from "express";
import cors from "cors";

dotenv.config();
const { Pool } = pkg;

const app = express();
app.use(express.json());
app.use(cors());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL_ACTIVE,
  ssl: process.env.NODE_ENV === "prod" ? { rejectUnauthorized: false } : false,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 20000,
});

pool.connect()
  .then(async (client) => {
    console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL");
    await client.query("SELECT current_database()");
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await client.query("UPDATE public.address_pool SET is_active = false WHERE is_active = true");
    client.release();
  })
  .catch((err) => {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err);
    process.exit(1);
  });

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø—É–ª–æ–º –∞–¥—Ä–µ—Å–æ–≤
const getFreeAddress = async () => {
  try {
    const res = await pool.query(
      "SELECT address FROM public.address_pool WHERE is_active = false LIMIT 1 FOR UPDATE SKIP LOCKED"
    );
    if (res.rowCount > 0) {
      const address = res.rows[0].address;
      await pool.query("UPDATE public.address_pool SET is_active = true WHERE address = $1", [address]);
      return address;
    }
    return null;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ getFreeAddress:", err.message);
    return null;
  }
};

const releaseAddress = async (address) => {
  try {
    await pool.query("UPDATE public.address_pool SET is_active = false WHERE address = $1", [address]);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ releaseAddress:", err.message);
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) {
  console.error("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!");
  process.exit(1);
}
const bot = new TelegramBot(token, { polling: true });

// –£–∑–Ω–∞—ë–º username –±–æ—Ç–∞
let botUsername = "";
bot.getMe().then((info) => {
  botUsername = info.username;
  console.log(`–ë–æ—Ç @${botUsername} –∑–∞–ø—É—â–µ–Ω`);
});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
// dev  => Sepolia Testnet (6 decimals, –¥–ª—è –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ ERC20)
// prod => BSC Mainnet (18 decimals, –¥–ª—è BUSD/USDT –∏ —Ç.–¥.)
const ENV = process.env.NODE_ENV;
const CONFIG = {
  prod: {
    rpcUrl: process.env.BSC_RPC_URL,
    usdtAddress: process.env.BUSD_CONTRACT_ADDRESS,
    chainName: "BSC Mainnet",
    decimals: 18,
  },
  dev: {
    rpcUrl: process.env.SEPOLIA_RPC_URL,
    usdtAddress: process.env.SEPOLIA_USDT_CONTRACT_ADDRESS,
    chainName: "Sepolia Testnet",
    decimals: 6,
  },
};
const { rpcUrl, usdtAddress, chainName, decimals } = CONFIG[ENV] || {};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º RPC –∏ –∞–¥—Ä–µ—Å
if (!rpcUrl || !usdtAddress || rpcUrl.length < 10 || usdtAddress.length < 10) {
  console.error("–û—à–∏–±–∫–∞: RPC –∏–ª–∏ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!");
  console.error(`NODE_ENV=${ENV}`);
  console.error(`rpcUrl=${rpcUrl}`);
  console.error(`usdtAddress=${usdtAddress}`);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
let provider;
try {
  provider = new ethers.JsonRpcProvider(rpcUrl);
} catch (err) {
  console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:", err.message);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
const erc20ABI = [
  "function balanceOf(address) view returns (uint256)",
  "function decimals() view returns (uint8)",
  "function transfer(address to, uint256 amount) returns (bool)",
];
let usdtContract = null;
try {
  if (provider && usdtAddress && usdtAddress.length > 0) {
    usdtContract = new ethers.Contract(usdtAddress, erc20ABI, provider);
    console.log("–ö–æ–Ω—Ç—Ä–∞–∫—Ç USDT/BUSD –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  } else {
    console.warn("–í–Ω–∏–º–∞–Ω–∏–µ: –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)!");
  }
} catch (err) {
  console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", err.message);
}

// –°–æ—Å—Ç–æ—è–Ω–∏—è
const userStates = {
  WAITING_PAYMENT: "WAITING_PAYMENT",
  IDLE: "IDLE",
};

const generateUserId = () => `USR-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;

// -----------------------------------------------------
// 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ "/setPrice <—á–∏—Å–ª–æ>"
// -----------------------------------------------------
bot.on("message", async (msg) => {
  if (!msg.text) return;
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
  if (msg.chat.type !== "group" && msg.chat.type !== "supergroup") return;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—à–µ—Ç –∞–¥–º–∏–Ω
  if (msg.from.id.toString() !== process.env.ADMIN_ID) return;

  const pattern = /\/setPrice\s+(\d+(\.\d+)?)/;
  const found = msg.text.match(pattern);
  if (!found) return;

  const amountFloat = parseFloat(found[1]);
  const description = msg.text.replace(pattern, "").trim();

  try {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –±–∞–∑–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
    const bigAmount = BigInt(Math.floor(amountFloat * 10 ** decimals)).toString();
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç, message_id = 0
    const insertPost = await pool.query(
      `INSERT INTO public.posts (message_id, amount, description, chat_id)
       VALUES ($1, $2, $3, $4)
       RETURNING id`,
      [0, bigAmount, description, msg.chat.id]
    );
    const postId = insertPost.rows[0].id;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å –∫–Ω–æ–ø–∫–æ–π
    const postMsg = await bot.sendMessage(
      msg.chat.id,
      `üì¢ *–ù–æ–≤—ã–π –ø–æ—Å—Ç*\nüí∞ *–°—É–º–º–∞:* ${amountFloat} USDT\n${description}\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å (—á–µ—Ä–µ–∑ –±–æ—Ç).`,
      {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–û–ø–ª–∞—Ç–∏—Ç—å",
                url: `https://t.me/${botUsername}?start=buy_subscription_${postId}`
              }
            ]
          ]
        }
      }
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
    await pool.query(
      "UPDATE public.posts SET message_id = $1 WHERE id = $2",
      [postMsg.message_id, postId]
    );

    // –°–æ–æ–±—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    bot.sendMessage(msg.chat.id, `‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω. ID: ${postId}, message_id: ${postMsg.message_id}`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:", err.message);
  }
});

// ---------------------------------------------------------------------
// 2. /start buy_subscription_<postId> ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–ø–ª–∞—Ç—É
// ---------------------------------------------------------------------
bot.onText(/\/start(?:@[^ ]+)?(?: (.+))?/, async (msg, match) => {
  const chatId = msg.chat.id;
  const args = match[1] ? match[1].split("_") : [];
  const isPrivate = (msg.chat.type === "private");

  // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ –∏–∑ –ª–∏—á–∫–∏
  if (!isPrivate) {
    if (args.length === 3 && args[0] === "buy" && args[1] === "subscription") {
      const postId = parseInt(args[2], 10);
      const link = `https://t.me/${botUsername}?start=buy_subscription_${postId}`;
      return bot.sendMessage(
        chatId,
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º: [—Å—Å—ã–ª–∫–∞](${link})`,
        { parse_mode: "Markdown" }
      );
    }
    return;
  }

  // –í –ª–∏—á–∫–µ
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userCheck = await pool.query("SELECT * FROM public.users WHERE user_id = $1", [msg.from.id]);
    let userUniqueId;
    if (userCheck.rowCount === 0) {
      userUniqueId = generateUserId();
      await pool.query(
        `INSERT INTO public.users (user_id, user_unique_id, state, last_interaction)
         VALUES ($1, $2, $3, NOW())`,
        [msg.from.id, userUniqueId, userStates.IDLE]
      );
    } else {
      userUniqueId = userCheck.rows[0].user_unique_id;
      await pool.query("UPDATE public.users SET last_interaction = NOW() WHERE user_id = $1", [msg.from.id]);
    }

    // –ï—Å–ª–∏ —ç—Ç–æ "buy_subscription_<postId>"
    if (args.length === 3 && args[0] === "buy" && args[1] === "subscription") {
      const postId = parseInt(args[2], 10);

      // –ò—â–µ–º –ø–æ—Å—Ç
      const postRes = await pool.query(
        "SELECT id, amount, chat_id FROM public.posts WHERE id = $1",
        [postId]
      );
      if (postRes.rowCount === 0) {
        return bot.sendMessage(chatId, "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      }

      // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –≥–æ—Ç–æ–≤
      if (!usdtContract) {
        return bot.sendMessage(chatId, "‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.");
      }

      const { amount, chat_id: groupChatId } = postRes.rows[0];
      const neededUSDT = parseFloat(amount.toString()) / (10 ** decimals);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (userCheck.rowCount > 0 && userCheck.rows[0].state === userStates.WAITING_PAYMENT) {
        return bot.sendMessage(chatId, "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è —É—Å–ª—É–≥–∞.");
      }

      // –ë–µ—Ä—ë–º —Å–≤–æ–±–æ–¥–Ω—ã–π –∞–¥—Ä–µ—Å –∏–∑ –ø—É–ª–∞
      const tempAddress = await getFreeAddress();
      if (!tempAddress) {
        return bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }

      // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —É—Å–ª—É–≥–∏
      const deadline = new Date(Date.now() + 60 * 60 * 1000); // 1 —á–∞—Å
      let initBal = "0";
      try {
        // –í—ã–∑—ã–≤–∞–µ–º balanceOf, –µ—Å–ª–∏ –≤—Å—ë –æ–∫
        const rawBal = await usdtContract.balanceOf(tempAddress);
        initBal = rawBal.toString();
      } catch (e) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∑–≤–∞—Ç—å balanceOf:", e.message);
        return bot.sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (balanceOf). –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.");
      }

      await pool.query(
        `INSERT INTO public.services
         (service_name, amount, temp_address, initial_balance, payment_deadline, user_id, group_chat_id, post_id)
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,
        [
          "Premium Access",
          amount,            // –≤ –±–∞–∑–µ —Ö—Ä–∞–Ω–∏–º –∫–∞–∫ BigInt (—Å—Ç—Ä–æ–∫–∞)
          tempAddress,
          initBal,
          deadline,
          msg.from.id,
          groupChatId,
          postId
        ]
      );
      // –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"
      await pool.query(
        "UPDATE public.users SET state = $1 WHERE user_id = $2",
        [userStates.WAITING_PAYMENT, msg.from.id]
      );

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É
      bot.sendMessage(
        chatId,
        `üõ†Ô∏è –£—Å–ª—É–≥–∞: Premium Access\nüí∞ –°—É–º–º–∞: ${neededUSDT} USDT\nüîó –ê–¥—Ä–µ—Å: ${tempAddress}\n‚è∞ –û–ø–ª–∞—Ç–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞`
      );

      // –°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      monitorAddressPayment(msg.from.id, chatId, tempAddress, neededUSDT, deadline);
    } else {
      // –ü—Ä–æ—Å—Ç–æ /start
      bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! –í–∞—à user_unique_id: ${userUniqueId}`);
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ /start:", err.message);
    bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞");
  }
});

// --------------------------------------------------------
// 3. Inline-–∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã"
// --------------------------------------------------------
bot.on("callback_query", async (query) => {
  const userId = query.from.id;
  const data = query.data;
  const fromChatId = query.message.chat.id;

  try {
    if (data.startsWith("cancel_payment_")) {
      const tempAddress = data.split("_")[2];
      const findService = await pool.query(
        `SELECT id FROM public.services
         WHERE temp_address = $1 AND user_id = $2 AND is_paid = false AND is_expired = false`,
        [tempAddress, userId]
      );
      if (findService.rowCount === 0) {
        await bot.sendMessage(fromChatId, "‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞.");
        return bot.answerCallbackQuery(query.id);
      }

      const srvId = findService.rows[0].id;
      await pool.query("UPDATE public.services SET is_expired = true WHERE id = $1", [srvId]);
      await pool.query("UPDATE public.users SET state = $1 WHERE user_id = $2", [userStates.IDLE, userId]);
      await releaseAddress(tempAddress);
      await bot.sendMessage(fromChatId, `–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –∞–¥—Ä–µ—Å –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω: ${tempAddress}`);
      return bot.answerCallbackQuery(query.id);
    }

    bot.answerCallbackQuery(query.id, { text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞." });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ callback_query:", err.message);
    bot.answerCallbackQuery(query.id);
  }
});

// --------------------------------------------------------
// 4. –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–∞ (–∫–∞–∂–¥—ã–µ 30—Å, —Å–æ–æ–±—â–∞–µ—Ç –≤ –õ–°)
// --------------------------------------------------------
function monitorAddressPayment(userId, privateChatId, tempAddress, expectedAmount, deadline) {
  if (!usdtContract) {
    bot.sendMessage(privateChatId, "‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.");
    return;
  }
  const expectedBN = BigInt(Math.floor(expectedAmount * 10 ** decimals));

  const timer = setInterval(async () => {
    try {
      if (new Date() > deadline) {
        clearInterval(timer);
        // –ü–æ–º–µ—á–∞–µ–º —É—Å–ª—É–≥—É –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é
        await pool.query("UPDATE public.users SET state = $1 WHERE user_id = $2", [userStates.IDLE, userId]);
        await pool.query(
          `UPDATE public.services SET is_expired = true
           WHERE temp_address = $1 AND user_id = $2 AND is_paid = false AND is_expired = false`,
          [tempAddress, userId]
        );
        await releaseAddress(tempAddress);

        bot.sendMessage(privateChatId, `‚è∞ –í—Ä–µ–º—è –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ê–¥—Ä–µ—Å ${tempAddress} –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω.`);
        return;
      }

      // –ò—â–µ–º —É—Å–ª—É–≥—É
      const srv = await pool.query(
        `SELECT initial_balance
         FROM public.services
         WHERE temp_address = $1
           AND user_id = $2
           AND is_paid = false
           AND is_expired = false
         LIMIT 1`,
        [tempAddress, userId]
      );
      if (srv.rowCount === 0) {
        clearInterval(timer);
        return;
      }

      const initBalBN = BigInt(srv.rows[0].initial_balance.split(".")[0] || "0");

      // –í—ã–∑—ã–≤–∞–µ–º balanceOf
      let currentRaw = BigInt(0);
      try {
        const bal = await usdtContract.balanceOf(tempAddress);
        currentRaw = BigInt(bal.toString());
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ balanceOf:", err.message);
        // –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ ‚Äî –ø–æ–≤—Ç–æ—Ä–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
        return;
      }

      const delta = currentRaw - initBalBN;
      if (delta >= expectedBN) {
        clearInterval(timer);
        // –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –æ–ø–ª–∞—á–µ–Ω–æ
        await pool.query(
          `UPDATE public.services
           SET is_paid = true, paid_at = NOW()
           WHERE temp_address = $1 AND user_id = $2`,
          [tempAddress, userId]
        );
        await pool.query("UPDATE public.users SET state = $1 WHERE user_id = $2", [userStates.IDLE, userId]);
        await releaseAddress(tempAddress);

        bot.sendMessage(
          privateChatId,
          `‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n–ê–¥—Ä–µ—Å: ${tempAddress}\n–°–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: https://example.com/secret`
        );
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ monitorAddressPayment:", err.message);
    }
  }, 30000);
}

// --------------------------------------------------------
// 5. –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —É—Å–ª—É–≥ (–∫–∞–∂–¥—ã–µ 30—Å)
// --------------------------------------------------------
const monitorAllServices = async () => {
  if (!usdtContract) return; // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –≥–æ—Ç–æ–≤
  try {
    const res = await pool.query(
      `SELECT temp_address, payment_deadline, amount, user_id
       FROM public.services
       WHERE is_paid = false AND is_expired = false`
    );
    for (const row of res.rows) {
      const user = row.user_id;
      const addr = row.temp_address;
      const bigStr = row.amount.toString();
      const needed = parseFloat(bigStr) / (10 ** decimals);
      const dd = row.payment_deadline;

      if (new Date(dd) < new Date()) {
        // –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
        await pool.query("UPDATE public.services SET is_expired = true WHERE temp_address = $1", [addr]);
        await releaseAddress(addr);
      } else {
        monitorAddressPayment(user, user, addr, needed, dd);
      }
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ monitorAllServices:", err.message);
  }
};
setInterval(monitorAllServices, 30000);

// --------------------------------------------------------
// 6. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
// --------------------------------------------------------
(async () => {
  if (!usdtContract) return;
  try {
    const pending = await pool.query(
      `SELECT temp_address, payment_deadline, amount, user_id
       FROM public.services
       WHERE is_paid = false AND is_expired = false`
    );
    for (const row of pending.rows) {
      const user = row.user_id;
      const addr = row.temp_address;
      const bigStr = row.amount.toString();
      const needed = parseFloat(bigStr) / (10 ** decimals);
      const dd = row.payment_deadline;

      if (new Date(dd) < new Date()) {
        await pool.query("UPDATE public.services SET is_expired = true WHERE temp_address = $1", [addr]);
        await releaseAddress(addr);
      } else {
        monitorAddressPayment(user, user, addr, needed, dd);
      }
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:", err.message);
  }
})();

// --------------------------------------------------------
// –ó–∞–ø—É—Å–∫ Express-—Å–µ—Ä–≤–µ—Ä–∞
// --------------------------------------------------------
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}. –°–µ—Ç—å: ${chainName}`);
});

// –ê–∫–∫—É—Ä–∞—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
function gracefulShutdown() {
  console.log("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
  pool.end(() => {
    console.log("PostgreSQL –æ—Ç–∫–ª—é—á—ë–Ω");
    process.exit(0);
  });
}
process.on("SIGTERM", gracefulShutdown);
process.on("SIGINT", gracefulShutdown);
